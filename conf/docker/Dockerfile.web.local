FROM php:7.4-apache
LABEL maintainer=

# Install PHP modules
RUN apt-get update \
    # generic libraries
    && apt-get install -y \
        curl \
        libonig-dev \
        libssl-dev \
        libxml2-dev \
        libyaml-dev \
        nano \
    # PHP modules
    && docker-php-ext-configure pcntl --enable-pcntl \
    && docker-php-ext-install \
        exif \
        gettext \
        intl \
        mbstring \
        pcntl \
        pdo_mysql \
    # APCu
    && echo '' | pecl install apcu-5.1.18 \
        && docker-php-ext-enable apcu \
        && echo "extension=apcu.so" > /usr/local/etc/php/php.ini \
    # gd
    && apt-get install -y \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libpng-dev \
    && docker-php-ext-configure gd \
        --with-freetype \
        --with-jpeg \
    && docker-php-ext-install -j$(nproc) gd \
    # HTMLdoc
    && apt-get install -y htmldoc \
    # imagemagick
    && apt-get install -y --force-yes \
        libmagickwand-dev --no-install-recommends \
        # Inkscape is needed if you want to read SVG files created by Inkscape
        inkscape \
        && pecl install imagick-3.4.4 \
        && docker-php-ext-enable imagick \
    # imap
    && apt-get install -y libc-client-dev libkrb5-dev \
        && docker-php-ext-configure imap --with-kerberos --with-imap-ssl \
    # xslt
    && apt-get install -y libxslt-dev \
        && docker-php-ext-install xsl \
    # YAML extension
    && pecl install yaml-2.0.4 && echo "extension=yaml.so" > /usr/local/etc/php/conf.d/ext-yaml.ini \
    # zip
    && apt-get install -y \
        libzip-dev \
        zip \
        && docker-php-ext-install zip \
    # Purge apt
    && apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y \
        && rm -rf /var/lib/apt/lists/*

# Opcache
RUN docker-php-ext-install opcache

RUN ln -snf /usr/share/zoneinfo/NZ /etc/localtime

# Dockerize
RUN curl -sfL https://github.com/powerman/dockerize/releases/download/v0.10.0/dockerize-`uname -s`-`uname -m` \
    | install /dev/stdin /usr/local/bin/dockerize

# PHP CLI configuration
COPY infra/php.ini.tpl /usr/local/etc/php/php.ini.tpl

# Geolite2 data file
COPY files/geolite2/GeoLite2-Country.mmdb /usr/local/share/geolite2/GeoLite2-Country.mmdb

# Install Apache modules
ENV APACHE_RUN_USER  www-data
ENV APACHE_RUN_GROUP www-data
ENV APACHE_LOG_DIR   /var/log/apache2
ENV APACHE_PID_FILE  /var/run/apache2/apache2.pid
ENV APACHE_RUN_DIR   /var/run/apache2
ENV APACHE_LOCK_DIR  /var/lock/apache2
ENV APACHE_LOG_DIR   /var/log/apache2
RUN a2enmod rewrite \
    && a2enmod ssl \
    && a2dissite 000-default.conf \
    && chown -R www-data:www-data /var/www \
    && mkdir -p $APACHE_RUN_DIR \
    && mkdir -p $APACHE_LOCK_DIR \
    && mkdir -p $APACHE_LOG_DIR

# Apache configuration (project-dependent)
COPY infra/php.ini.tpl /etc/php/7.4/apache2/php.ini.tpl
COPY infra/virtual-host.conf.tpl /etc/apache2/sites-enabled/virtual-host.conf.tpl

# Sendmail installation
RUN apt-get update \
    && apt-get install -y \
    msmtp msmtp-mta \
    # Purge apt
    && apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/*

# MSMTP configuration (project-dependent)
COPY infra/msmtprc.tpl /etc/msmtprc.tpl
COPY infra/msmtp.logrotate /etc/logrotate.d/msmtp

# Copy Symfony application files from local context
ADD sf.tar.gz /var/www/

# Arguments to build configuration files with dockerize
ARG ROUTER_REQUEST_CONTEXT_HOST
ENV ROUTER_REQUEST_CONTEXT_HOST $ROUTER_REQUEST_CONTEXT_HOST
ARG PHP_DISPLAY_ERRORS
ENV PHP_DISPLAY_ERRORS $PHP_DISPLAY_ERRORS
ARG PHP_ERROR_REPORTING
ENV PHP_ERROR_REPORTING $PHP_ERROR_REPORTING
ARG OPCACHE_ENABLE
ENV OPCACHE_ENABLE $OPCACHE_ENABLE
ARG OPCACHE_PRELOAD
ENV OPCACHE_PRELOAD $OPCACHE_PRELOAD
ARG SMTP_ACCOUNT
ENV SMTP_ACCOUNT $SMTP_ACCOUNT
ARG APP_ENV
ENV APP_ENV $APP_ENV

# To allow SF to write to var/cache and log on mounted volumes
RUN usermod -u 1000 www-data

# Preload Symfony cache for PHP opcache
RUN mkdir -p /var/www/cache \
    && chown -R www-data:www-data /var/www/cache \
    && mkdir -p /var/www/log \
    && chown -R www-data:www-data /var/www/log \
    && env DB_PASSWORD="dummy" \
        API_KEY="dummy" \
        APP_SECRET="dummy" \
        MAILER_PASSWORD="dummy" \
        /var/www/sf/bin/console cache:warmup --env=${APP_ENV}

# Add Tini
ENV TINI_VERSION v0.19.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini
ENTRYPOINT ["/tini", "--", "docker-php-entrypoint"]

#CMD ["apachectl", "-D", "FOREGROUND"]
CMD ["dockerize", \
    "-template", "/usr/local/etc/php/php.ini.tpl:/usr/local/etc/php/php.ini", \
    "-template", "/etc/php/7.4/apache2/php.ini.tpl:/etc/php/7.4/apache2/php.ini", \
    "-template", "/etc/apache2/sites-enabled/virtual-host.conf.tpl:/etc/apache2/sites-enabled/virtual-host.conf", \
    "-template", "/etc/msmtprc.tpl:/etc/msmtprc", \
    "apachectl", "-D", "FOREGROUND"]
